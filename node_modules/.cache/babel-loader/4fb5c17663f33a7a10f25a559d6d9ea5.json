{"ast":null,"code":"import _classCallCheck from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/phillip/Development/vhosts/playground.develop/good-green/src/components/naughty-list/index.js\";\nimport React, { Component } from 'react';\nimport { ListGroup, Container, Row, Col } from 'reactstrap';\nimport ReactPaginate from 'react-paginate';\nimport SearchResult from '../search-result'; // import { push } from 'connected-react-router'\n// import { bindActionCreators } from 'redux'\n// import { connect } from 'react-redux'\n// import ReactTable from \"react-table\";\n// Components\n\nvar NaughtyList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NaughtyList, _Component);\n\n  function NaughtyList(props) {\n    var _this;\n\n    _classCallCheck(this, NaughtyList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NaughtyList).call(this, props));\n\n    _this.saveData = function (data, saveType) {\n      return new Promise(function (resolve, reject) {\n        var tempState = _this.state;\n\n        switch (saveType) {\n          case 'violatorsOrdered':\n            tempState.violatorsOrdered = data;\n            break;\n\n          case 'violatorsData':\n            data.forEach(function (license) {\n              tempState.violatorsData[license.license] = license;\n            });\n            break;\n\n          default:\n            reject(new Error('saveData does not know what to do with \"' + saveType + '\" type data.'));\n            break;\n        }\n\n        _this.setState(tempState);\n\n        resolve(data);\n      });\n    };\n\n    _this.getNaughty = function () {\n      var naughtyCall = ['https://data.lcb.wa.gov/resource/dgm4-3cm6.json?'];\n      naughtyCall.push('$select=license_number,count(penalty_type)');\n      naughtyCall.push('&$group=(license_number)&$order=count(penalty_type)desc');\n      fetch(naughtyCall.join('')).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        return _this.saveData(data, 'violatorsOrdered');\n      }).then(_this.getLicenseData);\n    };\n\n    _this.getLicenseData = function (data) {\n      var justLics = data.map(function (violator) {\n        return violator.license_number;\n      }); // //This call uses the justLics array to get all of them at ones (or try)\n\n      var licDetailsCall = ['https://data.lcb.wa.gov/resource/bhbp-x4eb.json?'];\n      licDetailsCall.push('$where=license in (\"' + justLics.join('\",\"') + '\") ');\n      fetch(licDetailsCall.join('')).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        return _this.saveData(data, 'violatorsData');\n      }).then(_this.cleanNaughtyList);\n    };\n\n    _this.cleanNaughtyList = function () {\n      var justLics = _this.state.violatorsOrdered.map(function (violator) {\n        return violator.license_number;\n      });\n\n      var tempState = _this.state; // Loop through all the lics, checking to see if they are there, splice them out of the violatorsOrdered if there not\n\n      justLics.forEach(function (lic, index) {\n        if (_this.state.violatorsData[lic] === undefined) {\n          tempState.violatorsOrdered.splice(index, 1);\n        }\n      }); // Update state so the display changes\n\n      _this.setState(tempState);\n    };\n\n    _this.displayList = function () {\n      for (var i = (_this.state.pageNumber - 1) * _this.state.pageSize; i <= _this.state.pageNumber * _this.state.pageSize; i++) {\n        console.log(i);\n      }\n\n      var results = [];\n      var safety = 0; // This will stop it quickly if the list is not loaded enough to provide results, if it ever finds 5 blank licenses it will stop\n\n      var index = 0;\n\n      while (results.length < _this.state.limitor && safety < 5) {\n        var lic = _this.state.violatorsOrdered[index];\n\n        if (_this.state.violators[lic] !== undefined && _this.state.violators[lic].organization !== undefined) {\n          // So it's a good one, push it and reset the safty check\n          results.push(React.createElement(SearchResult, {\n            data: _this.state.violators[lic],\n            type: \"naughtyList\",\n            key: 'naughtyList' + lic,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }));\n          safety = 0;\n        } else {\n          safety++;\n        }\n\n        index++;\n      }\n\n      return results;\n    };\n\n    _this.render = function () {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"This is the naughty page, its kinda mess at the moment\")), React.createElement(ListGroup, {\n        className: 'row',\n        flush: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, _this.displayList()), React.createElement(ReactPaginate, {\n        pageCount: Math.ceil(_this.state.violatorsOrdered / _this.state.pageSize),\n        pageRangeDisplayed: 10,\n        marginPagesDisplayed: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }));\n    };\n\n    _this.state = {\n      violatorsData: {},\n      violatorsOrdered: [],\n      pageSize: 100,\n      pageNumber: 1\n    }; // Loop through all the licenses and grab the details we need\n\n    _this.getNaughty();\n\n    return _this;\n  } // This function will save the data and keep on truckin\n\n\n  return NaughtyList;\n}(Component); // <pre>{JSON.stringify(this.state,null,2)}</pre>\n\n\nexport default NaughtyList;","map":{"version":3,"sources":["/Users/phillip/Development/vhosts/playground.develop/good-green/src/components/naughty-list/index.js"],"names":["React","Component","ListGroup","Container","Row","Col","ReactPaginate","SearchResult","NaughtyList","props","saveData","data","saveType","Promise","resolve","reject","tempState","state","violatorsOrdered","forEach","license","violatorsData","Error","setState","getNaughty","naughtyCall","push","fetch","join","then","response","json","getLicenseData","justLics","map","violator","license_number","licDetailsCall","cleanNaughtyList","lic","index","undefined","splice","displayList","i","pageNumber","pageSize","console","log","results","safety","length","limitor","violators","organization","render","Math","ceil"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,GAA/B,EAAoCC,GAApC,QAA+C,YAA/C;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,YAAP,MAAyB,kBAAzB,C,CACA;AACA;AACA;AACA;AAEA;;IAEMC,W;;;;;AACL,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,qFAAMA,KAAN;;AADkB,UAanBC,QAbmB,GAaR,UAACC,IAAD,EAAMC,QAAN,EAAmB;AAC7B,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAkB;AACpC,YAAIC,SAAS,GAAG,MAAKC,KAArB;;AACA,gBAAOL,QAAP;AACC,eAAK,kBAAL;AACCI,YAAAA,SAAS,CAACE,gBAAV,GAA6BP,IAA7B;AACD;;AACA,eAAK,eAAL;AACCA,YAAAA,IAAI,CAACQ,OAAL,CAAa,UAACC,OAAD,EAAW;AACvBJ,cAAAA,SAAS,CAACK,aAAV,CAAwBD,OAAO,CAACA,OAAhC,IAA2CA,OAA3C;AACA,aAFD;AAGD;;AACA;AACCL,YAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,6CAA2CV,QAA3C,GAAoD,cAA9D,CAAD,CAAN;AACD;AAXD;;AAaA,cAAKW,QAAL,CAAcP,SAAd;;AACAF,QAAAA,OAAO,CAACH,IAAD,CAAP;AACA,OAjBM,CAAP;AAkBA,KAhCkB;;AAAA,UAmCnBa,UAnCmB,GAmCN,YAAM;AAClB,UAAIC,WAAW,GAAG,CAAC,kDAAD,CAAlB;AACAA,MAAAA,WAAW,CAACC,IAAZ,CAAiB,4CAAjB;AACAD,MAAAA,WAAW,CAACC,IAAZ,CAAiB,yDAAjB;AACAC,MAAAA,KAAK,CAACF,WAAW,CAACG,IAAZ,CAAiB,EAAjB,CAAD,CAAL,CAA4BC,IAA5B,CAAiC,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OAAzC,EAA8DF,IAA9D,CAAmE,UAAClB,IAAD,EAAQ;AAAC,eAAO,MAAKD,QAAL,CAAcC,IAAd,EAAmB,kBAAnB,CAAP;AAA8C,OAA1H,EAA4HkB,IAA5H,CAAiI,MAAKG,cAAtI;AACA,KAxCkB;;AAAA,UA4CnBA,cA5CmB,GA4CF,UAACrB,IAAD,EAAU;AAC1B,UAAIsB,QAAQ,GAAGtB,IAAI,CAACuB,GAAL,CAAS,UAACC,QAAD,EAAY;AAAC,eAAOA,QAAQ,CAACC,cAAhB;AAA+B,OAArD,CAAf,CAD0B,CAE1B;;AACA,UAAIC,cAAc,GAAG,CAAC,kDAAD,CAArB;AACAA,MAAAA,cAAc,CAACX,IAAf,CAAoB,yBAAuBO,QAAQ,CAACL,IAAT,CAAc,KAAd,CAAvB,GAA4C,KAAhE;AACAD,MAAAA,KAAK,CAACU,cAAc,CAACT,IAAf,CAAoB,EAApB,CAAD,CAAL,CAA+BC,IAA/B,CAAoC,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OAA5C,EAAiEF,IAAjE,CAAsE,UAAClB,IAAD,EAAQ;AAAC,eAAO,MAAKD,QAAL,CAAcC,IAAd,EAAmB,eAAnB,CAAP;AAA2C,OAA1H,EAA4HkB,IAA5H,CAAiI,MAAKS,gBAAtI;AACA,KAlDkB;;AAAA,UAsDnBA,gBAtDmB,GAsDA,YAAM;AACxB,UAAIL,QAAQ,GAAG,MAAKhB,KAAL,CAAWC,gBAAX,CAA4BgB,GAA5B,CAAgC,UAACC,QAAD,EAAY;AAAC,eAAOA,QAAQ,CAACC,cAAhB;AAA+B,OAA5E,CAAf;;AACA,UAAIpB,SAAS,GAAG,MAAKC,KAArB,CAFwB,CAGxB;;AACAgB,MAAAA,QAAQ,CAACd,OAAT,CAAiB,UAACoB,GAAD,EAAKC,KAAL,EAAa;AAC7B,YAAG,MAAKvB,KAAL,CAAWI,aAAX,CAAyBkB,GAAzB,MAAgCE,SAAnC,EAA6C;AAC5CzB,UAAAA,SAAS,CAACE,gBAAV,CAA2BwB,MAA3B,CAAkCF,KAAlC,EAAwC,CAAxC;AACA;AACD,OAJD,EAJwB,CASxB;;AACA,YAAKjB,QAAL,CAAcP,SAAd;AACA,KAjEkB;;AAAA,UAwGnB2B,WAxGmB,GAwGL,YAAM;AACnB,WAAI,IAAIC,CAAC,GAAG,CAAC,MAAK3B,KAAL,CAAW4B,UAAX,GAAsB,CAAvB,IAA0B,MAAK5B,KAAL,CAAW6B,QAAjD,EAA4DF,CAAC,IAAG,MAAK3B,KAAL,CAAW4B,UAAX,GAAsB,MAAK5B,KAAL,CAAW6B,QAAjG,EAA6GF,CAAC,EAA9G,EAAkH;AACjHG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,CAAZ;AACA;;AACD,UAAIK,OAAO,GAAG,EAAd;AACA,UAAIC,MAAM,GAAG,CAAb,CALmB,CAKH;;AAChB,UAAIV,KAAK,GAAG,CAAZ;;AACA,aAAMS,OAAO,CAACE,MAAR,GAAe,MAAKlC,KAAL,CAAWmC,OAA1B,IAAqCF,MAAM,GAAC,CAAlD,EAAoD;AACnD,YAAIX,GAAG,GAAG,MAAKtB,KAAL,CAAWC,gBAAX,CAA4BsB,KAA5B,CAAV;;AACA,YAAI,MAAKvB,KAAL,CAAWoC,SAAX,CAAqBd,GAArB,MAA8BE,SAA9B,IAA2C,MAAKxB,KAAL,CAAWoC,SAAX,CAAqBd,GAArB,EAA0Be,YAA1B,KAA2Cb,SAA1F,EAAoG;AACnG;AACAQ,UAAAA,OAAO,CAACvB,IAAR,CAAa,oBAAC,YAAD;AAAc,YAAA,IAAI,EAAE,MAAKT,KAAL,CAAWoC,SAAX,CAAqBd,GAArB,CAApB;AAA+C,YAAA,IAAI,EAAC,aAApD;AAAkE,YAAA,GAAG,EAAE,gBAAcA,GAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAb;AACAW,UAAAA,MAAM,GAAC,CAAP;AACA,SAJD,MAIK;AACJA,UAAAA,MAAM;AACN;;AACDV,QAAAA,KAAK;AACL;;AACD,aAAOS,OAAP;AACA,KA3HkB;;AAAA,UA6HnBM,MA7HmB,GA6HV,YAAM;AACd,aACC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEADD,CADD,EAIC,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE,KAAtB;AAA6B,QAAA,KAAK,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAKZ,WAAL,EADF,CAJD,EAOC,oBAAC,aAAD;AAAe,QAAA,SAAS,EAAEa,IAAI,CAACC,IAAL,CAAU,MAAKxC,KAAL,CAAWC,gBAAX,GAA4B,MAAKD,KAAL,CAAW6B,QAAjD,CAA1B;AAAsF,QAAA,kBAAkB,EAAE,EAA1G;AAA8G,QAAA,oBAAoB,EAAE,CAApI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPD,CADD;AAWA,KAzIkB;;AAElB,UAAK7B,KAAL,GAAa;AACZI,MAAAA,aAAa,EAAE,EADH;AAEZH,MAAAA,gBAAgB,EAAE,EAFN;AAGZ4B,MAAAA,QAAQ,EAAE,GAHE;AAIZD,MAAAA,UAAU,EAAE;AAJA,KAAb,CAFkB,CAQlB;;AACA,UAAKrB,UAAL;;AATkB;AAUlB,G,CAED;;;;EAbyBvB,S,GA4ItB;;;AAEJ,eAAeO,WAAf","sourcesContent":["import React, { Component } from 'react'\nimport { ListGroup, Container, Row, Col } from 'reactstrap';\nimport ReactPaginate from 'react-paginate';\nimport SearchResult from '../search-result'\n// import { push } from 'connected-react-router'\n// import { bindActionCreators } from 'redux'\n// import { connect } from 'react-redux'\n// import ReactTable from \"react-table\";\n\n// Components\n\nclass NaughtyList extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tviolatorsData: {},\n\t\t\tviolatorsOrdered: [],\n\t\t\tpageSize: 100,\n\t\t\tpageNumber: 1,\n\t\t};\n\t\t// Loop through all the licenses and grab the details we need\n\t\tthis.getNaughty();\n\t}\n\n\t// This function will save the data and keep on truckin\n\tsaveData = (data,saveType) => {\n\t\treturn new Promise((resolve,reject)=>{\n\t\t\tlet tempState = this.state;\n\t\t\tswitch(saveType){\n\t\t\t\tcase 'violatorsOrdered':\n\t\t\t\t\ttempState.violatorsOrdered = data;\n\t\t\t\tbreak;\n\t\t\t\tcase 'violatorsData':\n\t\t\t\t\tdata.forEach((license)=>{\n\t\t\t\t\t\ttempState.violatorsData[license.license] = license\n\t\t\t\t\t})\n\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treject(new Error('saveData does not know what to do with \"'+saveType+'\" type data.'));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.setState(tempState);\n\t\t\tresolve(data)\n\t\t});\n\t}\n\n\t// This will make the API call to get all violators grouped by violation count\n\tgetNaughty = () => {\n\t\tlet naughtyCall = ['https://data.lcb.wa.gov/resource/dgm4-3cm6.json?'];\n\t\tnaughtyCall.push('$select=license_number,count(penalty_type)');\n\t\tnaughtyCall.push('&$group=(license_number)&$order=count(penalty_type)desc');\n\t\tfetch(naughtyCall.join('')).then(response => response.json()).then((data)=>{return this.saveData(data,'violatorsOrdered')}).then(this.getLicenseData)\n\t}\n\n\t// This will take the Naughty data from the getNaughty function and add either add the appropriate license \n\t// data or delete the entry if no license data can be found (why that happens, IDK)\n\tgetLicenseData = (data) => {\n\t\tlet justLics = data.map((violator)=>{return violator.license_number});\n\t\t// //This call uses the justLics array to get all of them at ones (or try)\n\t\tlet licDetailsCall = ['https://data.lcb.wa.gov/resource/bhbp-x4eb.json?'];\n\t\tlicDetailsCall.push('$where=license in (\"'+justLics.join('\",\"')+'\") ')\n\t\tfetch(licDetailsCall.join('')).then(response => response.json()).then((data)=>{return this.saveData(data,'violatorsData')}).then(this.cleanNaughtyList)\n\t}\n\n\t// This function will remove the entries from state.violatorsOrdered that we could not find licenses for (no idea why)\n\t// This is done for simple and clean pagination\n\tcleanNaughtyList = () => {\n\t\tlet justLics = this.state.violatorsOrdered.map((violator)=>{return violator.license_number});\n\t\tlet tempState = this.state;\n\t\t// Loop through all the lics, checking to see if they are there, splice them out of the violatorsOrdered if there not\n\t\tjustLics.forEach((lic,index)=>{\n\t\t\tif(this.state.violatorsData[lic]===undefined){\n\t\t\t\ttempState.violatorsOrdered.splice(index,1)\n\t\t\t}\n\t\t});\n\t\t// Update state so the display changes\n\t\tthis.setState(tempState);\n\t}\n\n/*\n\t// This will grab the basic license information for the procided license number\n\tgetLicenseDetails = (licNums) => {\n\t\tlet licDetailsCall = ['https://data.lcb.wa.gov/resource/bhbp-x4eb.json?'];\n\t\tlicDetailsCall.push('$where=license in (\"'+licNums.join('\",\"')+'\") ')\n\t\tfetch(licDetailsCall.join('')).then(response => response.json()).then(this.storeLicenseDetails)\n\t}\n\t// Simply saves above\n\tstoreLicenseDetails = (data) => {\n\t\tlet tempState = this.state\n\t\tdata.forEach((lic)=>{\n\t\t\tif(tempState.violators[lic.license]===undefined){\n\t\t\t\ttempState.violators[lic.license] = {};\n\t\t\t}\n\t\t\ttempState.violators[lic.license] = {...tempState.violators[lic.license],...lic}\n\t\t})\n\t\tthis.setState(tempState);\n\t}\n\n\t// Determins the naughtiness of each license number, stored in a violators object, with the specific WAC codes in a seperate one\n\tcalculateNaughtiness = (data) => {\n\t\tlet tempState = this.state\n\n\t\t// This will load up the violators deatils for the listing\n\t\tdata.forEach((violator)=>{\n\t\t\tlet lic = violator.license_number\n\t\t\ttempState.violators[lic] = {};\n\t\t\ttempState.violators[lic].license_number = lic\n\t\t\ttempState.violators[lic].violations = violator.count_penalty_type\n\t\t\ttempState.violatorsOrdered.push(lic)\n\t\t});\n\t\tthis.setState(tempState);\n\t\tthis.getLicenseDetails(Object.keys(tempState.violators))\n\n\t}\n*/\n\t// Simply loops to call the list and renders it out, shared the SearchResults component.\n\tdisplayList = () => {\n\t\tfor(let i = (this.state.pageNumber-1)*this.state.pageSize ; i<=(this.state.pageNumber*this.state.pageSize) ; i++ ){\n\t\t\tconsole.log(i)\n\t\t}\n\t\tlet results = [];\n\t\tlet safety = 0; // This will stop it quickly if the list is not loaded enough to provide results, if it ever finds 5 blank licenses it will stop\n\t\tlet index = 0;\n\t\twhile(results.length<this.state.limitor && safety<5){\n\t\t\tlet lic = this.state.violatorsOrdered[index];\n\t\t\tif( this.state.violators[lic] !== undefined && this.state.violators[lic].organization !== undefined){\n\t\t\t\t// So it's a good one, push it and reset the safty check\n\t\t\t\tresults.push(<SearchResult data={this.state.violators[lic]} type=\"naughtyList\" key={'naughtyList'+lic}/>);\n\t\t\t\tsafety=0;\n\t\t\t}else{\n\t\t\t\tsafety++;\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t\treturn results;\n\t}\n\n\trender = () => { \n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>This is the naughty page, its kinda mess at the moment</Col>\n\t\t\t\t</Row>\n\t\t\t\t<ListGroup className={'row'} flush>\n\t\t\t\t\t{this.displayList()}\n\t\t\t\t</ListGroup>\n\t\t\t\t<ReactPaginate pageCount={Math.ceil(this.state.violatorsOrdered/this.state.pageSize)} pageRangeDisplayed={10} marginPagesDisplayed={0} />\n\t\t\t</Container>\n\t\t)\n\t}\n}\n\t\t\t\t// <pre>{JSON.stringify(this.state,null,2)}</pre>\n\nexport default NaughtyList;"]},"metadata":{},"sourceType":"module"}