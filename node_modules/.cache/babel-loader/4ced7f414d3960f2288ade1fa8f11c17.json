{"ast":null,"code":"import _classCallCheck from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/phillip/Development/vhosts/playground.develop/good-green/src/components/home/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { Dispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { saveSearchTerm as _saveSearchTerm, saveSearchResults as _saveSearchResults } from '../../actions.js'; // Components\n\nimport SearchResult from '../search-result';\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Home, _Component);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    console.log('constructor: props', props);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Home).call(this, props));\n\n    _this.updateSearch = function (e) {\n      e.preventDefault();\n      var term = e.target.querySelector('#search-term').value; // Get a temp state then update\n\n      var tempState = _this.state;\n      tempState.input = term;\n\n      _this.setState(tempState); // Save it into the redux store\n\n\n      _this.props.saveSearchTerm(term); // Get the search results (via the API)\n\n\n      _this.getSearchResults();\n    };\n\n    _this.getSearchResults = function () {\n      // Clean up the term\n      var pTerm = _this.state.input.toUpperCase(); // This will create a nice long query\n\n\n      var searchCall = ['https://data.lcb.wa.gov/resource/bhbp-x4eb.json?'];\n      searchCall.push('$where=organization%20like%20%27%25' + pTerm + '%25%27');\n      searchCall.push('or license%20like%20%27' + pTerm + '%25%27');\n      searchCall.push('or ubi%20like%20%27' + pTerm + '%25%27');\n      searchCall.push('&$order=%20organization'); // Fetch the data\n\n      fetch(searchCall.join('')).then(function (response) {\n        return response.json();\n      }).then(_this.storeSearchResults);\n    };\n\n    _this.storeSearchResults = function (resultArray) {\n      // Get a temp state, update it, then setState\n      var tempState = _this.state;\n      tempState.results = resultArray;\n\n      _this.setState(tempState); // Save the search results to the react store\n\n\n      _this.props.saveSearchResults(resultArray);\n    };\n\n    _this.displaySearchResults = function () {\n      var results = [];\n\n      _this.state.results.forEach(function (license) {\n        results.push(React.createElement(SearchResult, {\n          data: license,\n          key: 'searchResultsLic' + license.license,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }));\n      });\n\n      return results;\n    };\n\n    _this.displaySearchResultsSummary = function () {\n      if (_this.state.input === '' && _this.state.results.length === 0) {\n        return null;\n      } else if (_this.state.results.length === 0) {\n        return React.createElement(\"div\", {\n          className: 'search-summary no-results',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, \"No licenses were found matching your search.\"); // at 1000 the API caps, I could make it paginate and such but really the goal is to find a single entry, you need to refine your search if your finding 1000+\n      } else if (_this.state.results.length < 1000) {\n        return React.createElement(\"div\", {\n          className: 'search-summary result-count',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, \"Found \", _this.state.results.length, \" licenses matching your search.\");\n      } else {\n        // at 1000 resutls we are gonna guess there might be more\n        return React.createElement(\"div\", {\n          className: 'search-summary result-count',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, \"Found at least 1,000 licenses matching your search, perhaps you should refine it a bit.\");\n      }\n    };\n\n    _this.state = {\n      input: _this.props.searchInput,\n      results: []\n    };\n    return _this;\n  } // Simply updates the state and then starts the call against the API\n\n\n  _createClass(Home, [{\n    key: \"render\",\n    // Simple output, not really looking for a bnuch of hubub\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.updateSearch,\n        id: 'main-search-form',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \" Enter a name, license number, or UBI number\"), \" |\", this.props.a, \"|\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        id: 'search-term',\n        name: 'search-term',\n        type: \"search\",\n        defaultValue: this.state.input,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Search\")), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, this.displaySearchResults()), this.displaySearchResultsSummary());\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return state;\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    saveSearchTerm: function saveSearchTerm(term) {\n      dispatch(_saveSearchTerm(term));\n    },\n    saveSearchResults: function saveSearchResults(results) {\n      dispatch(_saveSearchResults(results));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home); // export default Home;","map":{"version":3,"sources":["/Users/phillip/Development/vhosts/playground.develop/good-green/src/components/home/index.js"],"names":["React","Component","connect","Dispatch","bindActionCreators","saveSearchTerm","saveSearchResults","SearchResult","Home","props","console","log","updateSearch","e","preventDefault","term","target","querySelector","value","tempState","state","input","setState","getSearchResults","pTerm","toUpperCase","searchCall","push","fetch","join","then","response","json","storeSearchResults","resultArray","results","displaySearchResults","forEach","license","displaySearchResultsSummary","length","searchInput","a","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\nimport { Dispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { saveSearchTerm, saveSearchResults } from '../../actions.js';\n\n// Components\nimport SearchResult from '../search-result'\n\nclass Home extends Component {\n\tconstructor(props) {\n\t\tconsole.log('constructor: props',props)\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinput: this.props.searchInput,\n\t\t\tresults: [],\n\t\t}\n\t}\n\n\t// Simply updates the state and then starts the call against the API\n\tupdateSearch = (e) => {\n\t\te.preventDefault()\n\t\tlet term = e.target.querySelector('#search-term').value\n\t\t\n\t\t// Get a temp state then update\n\t\tlet tempState = this.state\n\t\ttempState.input = term\n\t\tthis.setState(tempState)\n\n\t\t// Save it into the redux store\n\t\tthis.props.saveSearchTerm(term); \n\n\t\t// Get the search results (via the API)\n\t\tthis.getSearchResults();\n\t}\n\n\t// This will make a call against the licenses enpoint with the search term. It's kinda messy but it searches against name, ubi, \n\t// and lic# since you can easily find one of those things on the packaging (or so I've been told).\n\tgetSearchResults = () => {\n\t\t// Clean up the term\n\t\tlet pTerm = this.state.input.toUpperCase();\n\n\t\t// This will create a nice long query\n\t\tlet searchCall = ['https://data.lcb.wa.gov/resource/bhbp-x4eb.json?'];\n\t\tsearchCall.push('$where=organization%20like%20%27%25'+pTerm+'%25%27');\n\t\tsearchCall.push('or license%20like%20%27'+pTerm+'%25%27');\n\t\tsearchCall.push('or ubi%20like%20%27'+pTerm+'%25%27');\n\t\tsearchCall.push('&$order=%20organization');\n\n\t\t// Fetch the data\n\t\tfetch(searchCall.join('')).then(response => response.json()).then(this.storeSearchResults)\n\t}\n\t// This stores the latest search results in the state for display later\n\tstoreSearchResults = (resultArray) => {\n\t\t// Get a temp state, update it, then setState\n\t\tlet tempState = this.state\n\t\ttempState.results = resultArray\n\t\tthis.setState(tempState)\n\n\t\t// Save the search results to the react store\n\t\tthis.props.saveSearchResults(resultArray); \n\t}\n\n\t// Simply loops to call the SearchResult component\n\tdisplaySearchResults = () => {\n\t\tlet results = [];\n\t\tthis.state.results.forEach((license) => {\n\t\t\tresults.push(<SearchResult data={license} key={'searchResultsLic'+license.license}/>)\n\t\t})\n\t\treturn results;\n\t}\n\n\t// This gives a count at the bottom of the page.\n\tdisplaySearchResultsSummary = () => {\n\t\tif(this.state.input==='' && this.state.results.length===0){\n\t\t\treturn null\n\t\t}else if(this.state.results.length===0){\n\t\t\treturn (<div className={'search-summary no-results'}>No licenses were found matching your search.</div>)\n\t\t// at 1000 the API caps, I could make it paginate and such but really the goal is to find a single entry, you need to refine your search if your finding 1000+\n\t\t}else if(this.state.results.length < 1000){ \n\t\t\treturn (<div className={'search-summary result-count'}>Found {this.state.results.length} licenses matching your search.</div>)\n\t\t}else{ // at 1000 resutls we are gonna guess there might be more\n\t\t\treturn (<div className={'search-summary result-count'}>Found at least 1,000 licenses matching your search, perhaps you should refine it a bit.</div>)\n\t\t}\n\t}\n\n\t// Simple output, not really looking for a bnuch of hubub\n\trender(){ \n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<form onSubmit={this.updateSearch} id={'main-search-form'}>\n\t\t\t\t\t<i> Enter a name, license number, or UBI number</i> |{this.props.a}|<br/>\n\t\t\t\t  \t<input id={'search-term'} name={'search-term'} type=\"search\" defaultValue={this.state.input} />\n\t\t\t\t  \t<button>Search</button>\n\t\t\t\t</form>\n\t\t\t\t<ul>\n\t\t\t\t\t{this.displaySearchResults()}\n\t\t\t\t</ul>\n\t\t\t\t{this.displaySearchResultsSummary()}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nconst mapStateToProps = (state) => {\n\treturn state;\n};\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tsaveSearchTerm: (term) => {\tdispatch(saveSearchTerm(term))\t},\n\t\tsaveSearchResults: (results) => {\tdispatch(saveSearchResults(results))\t}\n\t}\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(Home)\n\n// export default Home;"]},"metadata":{},"sourceType":"module"}