{"ast":null,"code":"import _objectSpread from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/phillip/Development/vhosts/playground.develop/good-green/src/components/naughty-list/index.js\";\nimport React, { Component } from 'react';\nimport { ListGroup, ListGroupItem, Container, Row, Col } from 'reactstrap';\nimport SearchResult from '../search-result'; // import { push } from 'connected-react-router'\n// import { bindActionCreators } from 'redux'\n// import { connect } from 'react-redux'\n// import ReactTable from \"react-table\";\n// Components\n\nvar NaughtyList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NaughtyList, _Component);\n\n  function NaughtyList(props) {\n    var _this;\n\n    _classCallCheck(this, NaughtyList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NaughtyList).call(this, props));\n\n    _this.getLicenseDetails = function (licNum) {\n      var licDetailsCall = ['https://data.lcb.wa.gov/resource/bhbp-x4eb.json?'];\n      licDetailsCall.push('$where=license = \"' + licNum + '\" ');\n      fetch(licDetailsCall.join('')).then(function (response) {\n        return response.json();\n      }).then(_this.storeLicenseDetails);\n    };\n\n    _this.storeLicenseDetails = function (data) {\n      if (data[0] != undefined) {\n        var tempState = _this.state;\n        tempState.violators[data[0].license] = _objectSpread({}, _this.state.violators[data[0].license], data[0]);\n\n        _this.setState(tempState);\n      }\n    };\n\n    _this.getNaughty = function () {\n      var naughtyCall = ['https://data.lcb.wa.gov/resource/dgm4-3cm6.json?'];\n      naughtyCall.push('$select=license_number,count(penalty_type)');\n      naughtyCall.push('&$group=(license_number)&$order=count(penalty_type)desc'); // let naughtyCall = ['https://data.lcb.wa.gov/resource/dgm4-3cm6.json?']\n      // naughtyCall.push('$select=license_number,wac_code,case,violation_type');\n\n      fetch(naughtyCall.join('')).then(function (response) {\n        return response.json();\n      }).then(_this.calculateNaughtiness);\n    };\n\n    _this.calculateNaughtiness = function (data) {\n      var tempState = _this.state; // This will load up the violators deatils for the listing\n\n      data.forEach(function (violator) {\n        tempState.violators[violator.license_number] = {};\n        tempState.violators[violator.license_number].license_number = violator.license_number;\n        tempState.violators[violator.license_number].violations = violator.count_penalty_type;\n\n        _this.getLicenseDetails(violator.license_number);\n      }); // \n      // If the violator is not in the object yet add it\n      // if(tempState.violators[violation.license_number]===undefined){\n      // tempState.violators[violation.license_number] = {'violationBreakdown':{'_total':0}}\n      // \n      // }\n      // \n      // Add the violations details to the violationBreakdown\n      // tempState.violators[violation.license_number].violationBreakdown._total++;\n      // if(tempState.violators[violation.license_number].violationBreakdown[violation.wac_code]===undefined){\n      // tempState.violators[violation.license_number].violationBreakdown[violation.wac_code] = 0;\n      // }\n      // tempState.violators[violation.license_number].violationBreakdown[violation.wac_code]++;\n      // \n      // This is going to store the wac codes, that we we know what the numbers actually mean (probably will not be seen)\n      // if(tempState.wacCodes[violation.wac_code]===undefined){\n      // tempState.wacCodes[violation.wac_code] = violation.violation_type\n      // }\n      // })\n      // // Now that we have a complete naughtyness we can create an array ot lics sorted naughtest to nicest (of the naughty)\n      // let lics = Object.keys(tempState.violators)\n      // tempState.leaderboard = lics.sort((a,b)=>{\n      // \treturn tempState.violators[b].violationBreakdown._total - tempState.violators[a].violationBreakdown._total\n      // })\n      // // Save the state, it should not have everything it needs\n      // tempState.processing = false\n      // console.log(tempState)\n\n      _this.setState(tempState);\n    };\n\n    _this.displayList = function () {\n      var results = [];\n      var limit = 50;\n\n      if (_this.state.processing) {\n        results.push(React.createElement(ListGroupItem, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, \"Making a list and checking it twice.\"));\n      } else {\n        _this.state.leaderboard.forEach(function (license) {\n          if (limit > 0) {\n            limit--;\n            results.push(React.createElement(SearchResult, {\n              data: _this.state.violators[license],\n              type: \"naughtyList\",\n              key: 'naughtyList' + license,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 102\n              },\n              __self: this\n            }));\n          }\n        });\n      }\n\n      return results;\n    };\n\n    _this.state = {\n      violators: {},\n      wacCodes: {},\n      leaderboard: [],\n      processing: true // Loop through all the licenses and grab the details we need\n\n    };\n\n    _this.getNaughty();\n\n    return _this;\n  } // This will grab the basic license information for the procided license number\n\n\n  _createClass(NaughtyList, [{\n    key: \"render\",\n    value: function render() {\n      var detailID = this.state.displayedLicense;\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"This is the naughty page, its kinda mess at the moment\")), React.createElement(ListGroup, {\n        className: 'row',\n        flush: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, this.displayList()));\n    }\n  }]);\n\n  return NaughtyList;\n}(Component);\n\nexport default NaughtyList;","map":{"version":3,"sources":["/Users/phillip/Development/vhosts/playground.develop/good-green/src/components/naughty-list/index.js"],"names":["React","Component","ListGroup","ListGroupItem","Container","Row","Col","SearchResult","NaughtyList","props","getLicenseDetails","licNum","licDetailsCall","push","fetch","join","then","response","json","storeLicenseDetails","data","undefined","tempState","state","violators","license","setState","getNaughty","naughtyCall","calculateNaughtiness","forEach","violator","license_number","violations","count_penalty_type","displayList","results","limit","processing","leaderboard","wacCodes","detailID","displayedLicense"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,SAAnC,EAA8CC,GAA9C,EAAmDC,GAAnD,QAA8D,YAA9D;AACA,OAAOC,YAAP,MAAyB,kBAAzB,C,CACA;AACA;AACA;AACA;AAEA;;IAEMC,W;;;;;AACL,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,qFAAMA,KAAN;;AADkB,UAanBC,iBAbmB,GAaC,UAACC,MAAD,EAAY;AAC/B,UAAIC,cAAc,GAAG,CAAC,kDAAD,CAArB;AACAA,MAAAA,cAAc,CAACC,IAAf,CAAoB,uBAAqBF,MAArB,GAA4B,IAAhD;AACAG,MAAAA,KAAK,CAACF,cAAc,CAACG,IAAf,CAAoB,EAApB,CAAD,CAAL,CAA+BC,IAA/B,CAAoC,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OAA5C,EAAiEF,IAAjE,CAAsE,MAAKG,mBAA3E;AACA,KAjBkB;;AAAA,UAmBnBA,mBAnBmB,GAmBG,UAACC,IAAD,EAAU;AAC/B,UAAGA,IAAI,CAAC,CAAD,CAAJ,IAASC,SAAZ,EAAsB;AACrB,YAAIC,SAAS,GAAG,MAAKC,KAArB;AACAD,QAAAA,SAAS,CAACE,SAAV,CAAoBJ,IAAI,CAAC,CAAD,CAAJ,CAAQK,OAA5B,sBAA2C,MAAKF,KAAL,CAAWC,SAAX,CAAqBJ,IAAI,CAAC,CAAD,CAAJ,CAAQK,OAA7B,CAA3C,EAAoFL,IAAI,CAAC,CAAD,CAAxF;;AACA,cAAKM,QAAL,CAAcJ,SAAd;AACA;AACD,KAzBkB;;AAAA,UA4BnBK,UA5BmB,GA4BN,YAAM;AAClB,UAAIC,WAAW,GAAG,CAAC,kDAAD,CAAlB;AACAA,MAAAA,WAAW,CAACf,IAAZ,CAAiB,4CAAjB;AACAe,MAAAA,WAAW,CAACf,IAAZ,CAAiB,yDAAjB,EAHkB,CAIlB;AACA;;AACAC,MAAAA,KAAK,CAACc,WAAW,CAACb,IAAZ,CAAiB,EAAjB,CAAD,CAAL,CAA4BC,IAA5B,CAAiC,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OAAzC,EAA8DF,IAA9D,CAAmE,MAAKa,oBAAxE;AACA,KAnCkB;;AAAA,UAqCnBA,oBArCmB,GAqCI,UAACT,IAAD,EAAU;AAChC,UAAIE,SAAS,GAAG,MAAKC,KAArB,CADgC,CAGhC;;AACAH,MAAAA,IAAI,CAACU,OAAL,CAAa,UAACC,QAAD,EAAY;AACxBT,QAAAA,SAAS,CAACE,SAAV,CAAoBO,QAAQ,CAACC,cAA7B,IAA+C,EAA/C;AACAV,QAAAA,SAAS,CAACE,SAAV,CAAoBO,QAAQ,CAACC,cAA7B,EAA6CA,cAA7C,GAA8DD,QAAQ,CAACC,cAAvE;AACAV,QAAAA,SAAS,CAACE,SAAV,CAAoBO,QAAQ,CAACC,cAA7B,EAA6CC,UAA7C,GAA0DF,QAAQ,CAACG,kBAAnE;;AACA,cAAKxB,iBAAL,CAAuBqB,QAAQ,CAACC,cAAhC;AACA,OALD,EAJgC,CAWlC;AACG;AACA;AACC;AACA;AACD;AACH;AACG;AACA;AACA;AACC;AACD;AACA;AACH;AACG;AACA;AACC;AACD;AACD;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,YAAKN,QAAL,CAAcJ,SAAd;AACA,KA9EkB;;AAAA,UAiFnBa,WAjFmB,GAiFL,YAAM;AACnB,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,KAAK,GAAG,EAAZ;;AACA,UAAG,MAAKd,KAAL,CAAWe,UAAd,EAAyB;AACxBF,QAAAA,OAAO,CAACvB,IAAR,CAAa,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAAb;AACA,OAFD,MAEK;AACJ,cAAKU,KAAL,CAAWgB,WAAX,CAAuBT,OAAvB,CAA+B,UAACL,OAAD,EAAa;AAC3C,cAAGY,KAAK,GAAC,CAAT,EAAW;AACVA,YAAAA,KAAK;AACLD,YAAAA,OAAO,CAACvB,IAAR,CAAa,oBAAC,YAAD;AAAc,cAAA,IAAI,EAAE,MAAKU,KAAL,CAAWC,SAAX,CAAqBC,OAArB,CAApB;AAAmD,cAAA,IAAI,EAAC,aAAxD;AAAsE,cAAA,GAAG,EAAE,gBAAcA,OAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAb;AACA;AACD,SALD;AAMA;;AACD,aAAOW,OAAP;AACA,KA/FkB;;AAElB,UAAKb,KAAL,GAAa;AACZC,MAAAA,SAAS,EAAE,EADC;AAEZgB,MAAAA,QAAQ,EAAE,EAFE;AAGZD,MAAAA,WAAW,EAAE,EAHD;AAIZD,MAAAA,UAAU,EAAE,IAJA,CAMb;;AANa,KAAb;;AAOA,UAAKX,UAAL;;AATkB;AAUlB,G,CAED;;;;;6BAqFQ;AACP,UAAIc,QAAQ,GAAG,KAAKlB,KAAL,CAAWmB,gBAA1B;AACA,aACC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEADD,CADD,EAIC,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE,KAAtB;AAA6B,QAAA,KAAK,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,KAAKP,WAAL,EADF,CAJD,CADD;AAUA;;;;EA9GwBlC,S;;AAiH1B,eAAeO,WAAf","sourcesContent":["import React, { Component } from 'react'\nimport { ListGroup, ListGroupItem, Container, Row, Col } from 'reactstrap';\nimport SearchResult from '../search-result'\n// import { push } from 'connected-react-router'\n// import { bindActionCreators } from 'redux'\n// import { connect } from 'react-redux'\n// import ReactTable from \"react-table\";\n\n// Components\n\nclass NaughtyList extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tviolators: {},\n\t\t\twacCodes: {},\n\t\t\tleaderboard: [],\n\t\t\tprocessing: true,\n\t\t}\n\t\t// Loop through all the licenses and grab the details we need\n\t\tthis.getNaughty();\n\t}\n\n\t// This will grab the basic license information for the procided license number\n\tgetLicenseDetails = (licNum) => {\n\t\tlet licDetailsCall = ['https://data.lcb.wa.gov/resource/bhbp-x4eb.json?'];\n\t\tlicDetailsCall.push('$where=license = \"'+licNum+'\" ')\n\t\tfetch(licDetailsCall.join('')).then(response => response.json()).then(this.storeLicenseDetails)\n\t}\n\t// Simply saves above\n\tstoreLicenseDetails = (data) => {\n\t\tif(data[0]!=undefined){\n\t\t\tlet tempState = this.state\n\t\t\ttempState.violators[data[0].license] = {...this.state.violators[data[0].license],...data[0]}\n\t\t\tthis.setState(tempState);\n\t\t}\n\t}\n\n\t// This will look for other licenses that may have the same organization name, so we can give the option to combine.\n\tgetNaughty = () => {\n\t\tlet naughtyCall = ['https://data.lcb.wa.gov/resource/dgm4-3cm6.json?'];\n\t\tnaughtyCall.push('$select=license_number,count(penalty_type)');\n\t\tnaughtyCall.push('&$group=(license_number)&$order=count(penalty_type)desc');\n\t\t// let naughtyCall = ['https://data.lcb.wa.gov/resource/dgm4-3cm6.json?']\n\t\t// naughtyCall.push('$select=license_number,wac_code,case,violation_type');\n\t\tfetch(naughtyCall.join('')).then(response => response.json()).then(this.calculateNaughtiness)\n\t}\n\t// Determins the naughtiness of each license number, stored in a violators object, with the specific WAC codes in a seperate one\n\tcalculateNaughtiness = (data) => {\n\t\tlet tempState = this.state\n\n\t\t// This will load up the violators deatils for the listing\n\t\tdata.forEach((violator)=>{\n\t\t\ttempState.violators[violator.license_number] = {};\n\t\t\ttempState.violators[violator.license_number].license_number = violator.license_number\n\t\t\ttempState.violators[violator.license_number].violations = violator.count_penalty_type\n\t\t\tthis.getLicenseDetails(violator.license_number);\n\t\t});\n\n// \n\t\t\t// If the violator is not in the object yet add it\n\t\t\t// if(tempState.violators[violation.license_number]===undefined){\n\t\t\t\t// tempState.violators[violation.license_number] = {'violationBreakdown':{'_total':0}}\n\t\t\t\t// \n\t\t\t// }\n// \n\t\t\t// Add the violations details to the violationBreakdown\n\t\t\t// tempState.violators[violation.license_number].violationBreakdown._total++;\n\t\t\t// if(tempState.violators[violation.license_number].violationBreakdown[violation.wac_code]===undefined){\n\t\t\t\t// tempState.violators[violation.license_number].violationBreakdown[violation.wac_code] = 0;\n\t\t\t// }\n\t\t\t// tempState.violators[violation.license_number].violationBreakdown[violation.wac_code]++;\n// \n\t\t\t// This is going to store the wac codes, that we we know what the numbers actually mean (probably will not be seen)\n\t\t\t// if(tempState.wacCodes[violation.wac_code]===undefined){\n\t\t\t\t// tempState.wacCodes[violation.wac_code] = violation.violation_type\n\t\t\t// }\n\t\t// })\n\n\t\t// // Now that we have a complete naughtyness we can create an array ot lics sorted naughtest to nicest (of the naughty)\n\t\t// let lics = Object.keys(tempState.violators)\n\t\t// tempState.leaderboard = lics.sort((a,b)=>{\n\t\t// \treturn tempState.violators[b].violationBreakdown._total - tempState.violators[a].violationBreakdown._total\n\t\t// })\n\n\t\t// // Save the state, it should not have everything it needs\n\t\t// tempState.processing = false\n\t\t// console.log(tempState)\n\t\tthis.setState(tempState);\n\t}\n\n\t// Simply loops to call the list and renders it out, shared the SearchResults component.\n\tdisplayList = () => {\n\t\tlet results = [];\n\t\tlet limit = 50;\n\t\tif(this.state.processing){\n\t\t\tresults.push(<ListGroupItem>Making a list and checking it twice.</ListGroupItem>)\n\t\t}else{\n\t\t\tthis.state.leaderboard.forEach((license) => {\n\t\t\t\tif(limit>0){\n\t\t\t\t\tlimit--\n\t\t\t\t\tresults.push(<SearchResult data={this.state.violators[license]} type=\"naughtyList\" key={'naughtyList'+license}/>)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\treturn results;\n\t}\n\n\trender(){ \n\t\tlet detailID = this.state.displayedLicense;\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>This is the naughty page, its kinda mess at the moment</Col>\n\t\t\t\t</Row>\n\t\t\t\t<ListGroup className={'row'} flush>\n\t\t\t\t\t{this.displayList()}\n\t\t\t\t</ListGroup>\n\t\t\t</Container>\n\t\t)\n\t}\n}\n\nexport default NaughtyList;"]},"metadata":{},"sourceType":"module"}