{"ast":null,"code":"import _objectSpread from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/phillip/Development/vhosts/playground.develop/good-green/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/phillip/Development/vhosts/playground.develop/good-green/src/components/naughty-list/index.js\";\nimport React, { Component } from 'react';\nimport { ListGroup, Container, Row, Col } from 'reactstrap';\nimport ReactPaginate from 'react-paginate';\nimport SearchResult from '../search-result'; // import { push } from 'connected-react-router'\n// import { bindActionCreators } from 'redux'\n// import { connect } from 'react-redux'\n// import ReactTable from \"react-table\";\n// Components\n\nvar NaughtyList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NaughtyList, _Component);\n\n  function NaughtyList(props) {\n    var _this;\n\n    _classCallCheck(this, NaughtyList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NaughtyList).call(this, props));\n\n    _this.saveData = function (data, saveType) {\n      console.log('!!!', _assertThisInitialized(_assertThisInitialized(_this)), data, saveType);\n      return new Promise(function (resolve, reject) {\n        var tempState = _this.state;\n\n        switch (saveType) {\n          case 'violatorsOrdered':\n            tempState.violatorsOrdered = data;\n            break;\n\n          case 'violatorsData':\n            console.log('otherone');\n            break;\n\n          default:\n            reject(new Error('saveData does not know what to do with \"' + saveType + '\" type data.'));\n            break;\n        }\n\n        _this.setState(tempState);\n\n        resolve(data);\n      });\n    };\n\n    _this.getNaughty = function () {\n      var naughtyCall = ['https://data.lcb.wa.gov/resource/dgm4-3cm6.json?'];\n      naughtyCall.push('$select=license_number,count(penalty_type)');\n      naughtyCall.push('&$group=(license_number)&$order=count(penalty_type)desc');\n      fetch(naughtyCall.join('')).then(function (response) {\n        return response.json();\n      }).then(_this.saveData.bind('violatorsOrdered')).then(_this.getLicenseData);\n    };\n\n    _this.getLicenseData = function (data) {} // let justLics = data.map((violator)=>{violator.license_number});\n    // \n    // This call uses the justLics array to get all of them at ones (or try)\n    // let licDetailsCall = ['https://data.lcb.wa.gov/resource/bhbp-x4eb.json?'];\n    // licDetailsCall.push('$where=license in (\"'+licNums.join('\",\"')+'\") ')\n    // fetch(licDetailsCall.join('')).then(response => response.json()).then(this.storeLicenseDetails)\n    // \n    // console.log(justLics);\n    // This will grab the basic license information for the procided license number\n    ;\n\n    _this.getLicenseDetails = function (licNums) {\n      var licDetailsCall = ['https://data.lcb.wa.gov/resource/bhbp-x4eb.json?'];\n      licDetailsCall.push('$where=license in (\"' + licNums.join('\",\"') + '\") ');\n      fetch(licDetailsCall.join('')).then(function (response) {\n        return response.json();\n      }).then(_this.storeLicenseDetails);\n    };\n\n    _this.storeLicenseDetails = function (data) {\n      var tempState = _this.state;\n      data.forEach(function (lic) {\n        if (tempState.violators[lic.license] === undefined) {\n          tempState.violators[lic.license] = {};\n        }\n\n        tempState.violators[lic.license] = _objectSpread({}, tempState.violators[lic.license], lic);\n      });\n\n      _this.setState(tempState);\n    };\n\n    _this.calculateNaughtiness = function (data) {\n      var tempState = _this.state; // This will load up the violators deatils for the listing\n\n      data.forEach(function (violator) {\n        var lic = violator.license_number;\n        tempState.violators[lic] = {};\n        tempState.violators[lic].license_number = lic;\n        tempState.violators[lic].violations = violator.count_penalty_type;\n        tempState.violatorsOrdered.push(lic);\n      });\n\n      _this.setState(tempState);\n\n      _this.getLicenseDetails(Object.keys(tempState.violators));\n    };\n\n    _this.displayList = function () {\n      var results = [];\n      var safety = 0; // This will stop it quickly if the list is not loaded enough to provide results, if it ever finds 5 blank licenses it will stop\n\n      var index = 0;\n\n      while (results.length < _this.state.limitor && safety < 5) {\n        var lic = _this.state.violatorsOrdered[index];\n\n        if (_this.state.violators[lic] !== undefined && _this.state.violators[lic].organization !== undefined) {\n          // So it's a good one, push it and reset the safty check\n          results.push(React.createElement(SearchResult, {\n            data: _this.state.violators[lic],\n            type: \"naughtyList\",\n            key: 'naughtyList' + lic,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124\n            },\n            __self: this\n          }));\n          safety = 0;\n        } else {\n          safety++;\n        }\n\n        index++;\n      }\n\n      return results;\n    };\n\n    _this.render = function () {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"This is the naughty page, its kinda mess at the moment\")), React.createElement(ListGroup, {\n        className: 'row',\n        flush: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, _this.displayList()));\n    };\n\n    _this.state = {\n      violatorsData: {},\n      violatorsOrdered: []\n    }; // Loop through all the licenses and grab the details we need\n\n    _this.getNaughty();\n\n    return _this;\n  } // This function will save the data and keep on truckin\n\n\n  return NaughtyList;\n}(Component); // <pre>{JSON.stringify(this.state,null,2)}</pre>\n\n\nexport default NaughtyList;","map":{"version":3,"sources":["/Users/phillip/Development/vhosts/playground.develop/good-green/src/components/naughty-list/index.js"],"names":["React","Component","ListGroup","Container","Row","Col","ReactPaginate","SearchResult","NaughtyList","props","saveData","data","saveType","console","log","Promise","resolve","reject","tempState","state","violatorsOrdered","Error","setState","getNaughty","naughtyCall","push","fetch","join","then","response","json","bind","getLicenseData","getLicenseDetails","licNums","licDetailsCall","storeLicenseDetails","forEach","lic","violators","license","undefined","calculateNaughtiness","violator","license_number","violations","count_penalty_type","Object","keys","displayList","results","safety","index","length","limitor","organization","render","violatorsData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { ListGroup, Container, Row, Col } from 'reactstrap';\nimport ReactPaginate from 'react-paginate';\nimport SearchResult from '../search-result'\n// import { push } from 'connected-react-router'\n// import { bindActionCreators } from 'redux'\n// import { connect } from 'react-redux'\n// import ReactTable from \"react-table\";\n\n// Components\n\nclass NaughtyList extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tviolatorsData: {},\n\t\t\tviolatorsOrdered: [],\n\t\t};\n\t\t// Loop through all the licenses and grab the details we need\n\t\tthis.getNaughty();\n\t}\n\n\t// This function will save the data and keep on truckin\n\tsaveData = (data,saveType) => {\n\t\tconsole.log('!!!',this,data,saveType)\n\t\treturn new Promise((resolve,reject)=>{\n\t\t\tlet tempState = this.state;\n\t\t\tswitch(saveType){\n\t\t\t\tcase 'violatorsOrdered':\n\t\t\t\t\ttempState.violatorsOrdered = data;\n\t\t\t\tbreak;\n\t\t\t\tcase 'violatorsData':\n\t\t\t\t\tconsole.log('otherone')\n\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treject(new Error('saveData does not know what to do with \"'+saveType+'\" type data.'));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.setState(tempState);\n\t\t\tresolve(data)\n\t\t});\n\t}\n\t// function getData() {\n //    return new Promise((resolve, reject)=>{\n //        $.ajax({\n //            url: `http://www.omdbapi.com/?t=The+Matrix`,\n //            method: 'GET'\n //            }).done((response)=>{\n //                //this means my api call suceeded, so I will call resolve on the response\n //                resolve(response);\n //            }).fail((error)=>{\n //                //this means the api call failed, so I will call reject on the error\n //                reject(error);\n //            });\n //    });\n// }\n\n\t// This will make the API call to get all violators grouped by violation count\n\tgetNaughty = () => {\n\t\tlet naughtyCall = ['https://data.lcb.wa.gov/resource/dgm4-3cm6.json?'];\n\t\tnaughtyCall.push('$select=license_number,count(penalty_type)');\n\t\tnaughtyCall.push('&$group=(license_number)&$order=count(penalty_type)desc');\n\t\tfetch(naughtyCall.join('')).then(response => response.json()).then(this.saveData.bind('violatorsOrdered')).then(this.getLicenseData)\n\t}\n\n\t// This will take the Naughty data from the getNaughty function and add either add the appropriate license \n\t// data or delete the entry if no license data can be found (why that happens, IDK)\n\tgetLicenseData = (data) => {\n\t\t// let justLics = data.map((violator)=>{violator.license_number});\n// \n\t\t// This call uses the justLics array to get all of them at ones (or try)\n\t\t// let licDetailsCall = ['https://data.lcb.wa.gov/resource/bhbp-x4eb.json?'];\n\t\t// licDetailsCall.push('$where=license in (\"'+licNums.join('\",\"')+'\") ')\n\t\t// fetch(licDetailsCall.join('')).then(response => response.json()).then(this.storeLicenseDetails)\n// \n\t\t// console.log(justLics);\n\t}\n\n\n\t// This will grab the basic license information for the procided license number\n\tgetLicenseDetails = (licNums) => {\n\t\tlet licDetailsCall = ['https://data.lcb.wa.gov/resource/bhbp-x4eb.json?'];\n\t\tlicDetailsCall.push('$where=license in (\"'+licNums.join('\",\"')+'\") ')\n\t\tfetch(licDetailsCall.join('')).then(response => response.json()).then(this.storeLicenseDetails)\n\t}\n\t// Simply saves above\n\tstoreLicenseDetails = (data) => {\n\t\tlet tempState = this.state\n\t\tdata.forEach((lic)=>{\n\t\t\tif(tempState.violators[lic.license]===undefined){\n\t\t\t\ttempState.violators[lic.license] = {};\n\t\t\t}\n\t\t\ttempState.violators[lic.license] = {...tempState.violators[lic.license],...lic}\n\t\t})\n\t\tthis.setState(tempState);\n\t}\n\n\t// Determins the naughtiness of each license number, stored in a violators object, with the specific WAC codes in a seperate one\n\tcalculateNaughtiness = (data) => {\n\t\tlet tempState = this.state\n\n\t\t// This will load up the violators deatils for the listing\n\t\tdata.forEach((violator)=>{\n\t\t\tlet lic = violator.license_number\n\t\t\ttempState.violators[lic] = {};\n\t\t\ttempState.violators[lic].license_number = lic\n\t\t\ttempState.violators[lic].violations = violator.count_penalty_type\n\t\t\ttempState.violatorsOrdered.push(lic)\n\t\t});\n\t\tthis.setState(tempState);\n\t\tthis.getLicenseDetails(Object.keys(tempState.violators))\n\n\t}\n\n\t// Simply loops to call the list and renders it out, shared the SearchResults component.\n\tdisplayList = () => {\n\t\tlet results = [];\n\t\tlet safety = 0; // This will stop it quickly if the list is not loaded enough to provide results, if it ever finds 5 blank licenses it will stop\n\t\tlet index = 0;\n\t\twhile(results.length<this.state.limitor && safety<5){\n\t\t\tlet lic = this.state.violatorsOrdered[index];\n\t\t\tif( this.state.violators[lic] !== undefined && this.state.violators[lic].organization !== undefined){\n\t\t\t\t// So it's a good one, push it and reset the safty check\n\t\t\t\tresults.push(<SearchResult data={this.state.violators[lic]} type=\"naughtyList\" key={'naughtyList'+lic}/>);\n\t\t\t\tsafety=0;\n\t\t\t}else{\n\t\t\t\tsafety++;\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t\treturn results;\n\t}\n\n\trender = () => { \n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>This is the naughty page, its kinda mess at the moment</Col>\n\t\t\t\t</Row>\n\t\t\t\t<ListGroup className={'row'} flush>\n\t\t\t\t\t{this.displayList()}\n\t\t\t\t</ListGroup>\n\t\t\t</Container>\n\t\t)\n\t}\n}\n\t\t\t\t// <pre>{JSON.stringify(this.state,null,2)}</pre>\n\nexport default NaughtyList;"]},"metadata":{},"sourceType":"module"}