{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withManager = withManager;\nexports.ScrollManager = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _timedMutationObserver = _interopRequireDefault(require(\"./timedMutationObserver\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar debug = require('debug')('ScrollManager');\n\nvar ManagerContext = _react.default.createContext();\n\nvar defaultTimeout = 3000;\n\nvar ScrollManager =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ScrollManager, _React$Component);\n\n  function ScrollManager(props) {\n    var _this;\n\n    _classCallCheck(this, ScrollManager);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrollManager).call(this, props));\n    var history = props.history,\n        _props$sessionKey = props.sessionKey,\n        sessionKey = _props$sessionKey === void 0 ? 'ScrollManager' : _props$sessionKey,\n        _props$timeout = props.timeout,\n        timeout = _props$timeout === void 0 ? defaultTimeout : _props$timeout;\n\n    if ('scrollRestoration' in window.history) {\n      _this._originalScrollRestoration = window.history.scrollRestoration;\n      window.history.scrollRestoration = 'manual';\n    } // load positions and associated tracking data from session state\n\n\n    try {\n      var data = sessionStorage.getItem(sessionKey);\n      _this._session = JSON.parse(data || '{}');\n    } catch (e) {\n      debug('Error reading session storage:', e.message);\n      _this._session = {};\n    }\n\n    _this._positions = _this._session.positions || (_this._session.positions = {});\n    _this._locations = _this._session.locations || (_this._session.locations = []);\n    _this._historyStart = history.length - _this._locations.length;\n    var initialKey = 'initial';\n    _this._locationKey = _this._session.locationKey || initialKey; // initialize emphemeral state of scrollable nodes\n\n    _this._scrollableNodes = {};\n    _this._deferredNodes = {};\n    window.addEventListener('beforeunload', function () {\n      // write everything back to session state on unload\n      _this._savePositions();\n\n      _this._session.locationKey = _this._locationKey;\n\n      try {\n        sessionStorage.setItem(sessionKey, JSON.stringify(_this._session));\n      } catch (e) {// session state full or unavailable\n      }\n    });\n    _this._unlisten = history.listen(function (location, action) {\n      _this._savePositions(); // cancel any pending hash scroller\n\n\n      if (_this._hashScroller) {\n        _this._hashScroller.cancel();\n\n        _this._hashScroller = null;\n      } // clean up positions no longer in history to avoid leaking memory\n      // (including last history element if action is PUSH or REPLACE)\n\n\n      var locationCount = Math.max(0, history.length - _this._historyStart - (action !== 'POP' ? 1 : 0));\n\n      while (_this._locations.length > locationCount) {\n        var _key = _this._locations.pop();\n\n        delete _this._positions[_key];\n      }\n\n      var key = location.key || initialKey;\n\n      if (action !== 'POP') {\n        // track the new location key in our array of locations\n        _this._locations.push(key);\n\n        _this._historyStart = history.length - _this._locations.length; // check for hash links that need deferral of scrolling into view\n\n        if (typeof location.hash === 'string' && location.hash.length > 1) {\n          var elementId = location.hash.substring(1);\n          _this._hashScroller = (0, _timedMutationObserver.default)(function () {\n            var element = document.getElementById(elementId);\n\n            if (element) {\n              debug(\"Scrolling element \".concat(elementId, \" into view\"));\n              element.scrollIntoView();\n              return true;\n            }\n\n            return false;\n          }, timeout);\n\n          _this._hashScroller.catch(function (e) {\n            if (!e.cancelled) {\n              debug(\"Timeout scrolling hash element \".concat(elementId, \" into view\"));\n            }\n          });\n        }\n      } // set current location key for saving position on next history change\n\n\n      _this._locationKey = key;\n    });\n    return _this;\n  }\n\n  _createClass(ScrollManager, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._unlisten) {\n        this._unlisten();\n      }\n\n      if (this._originalScrollRestoration) {\n        window.history.scrollRestoration = this._originalScrollRestoration;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(ManagerContext.Provider, {\n        value: this\n      }, this.props.children);\n    }\n  }, {\n    key: \"_registerElement\",\n    value: function _registerElement(scrollKey, node) {\n      this._scrollableNodes[scrollKey] = node;\n\n      this._restoreNode(scrollKey);\n    }\n  }, {\n    key: \"_unregisterElement\",\n    value: function _unregisterElement(scrollKey) {\n      delete this._scrollableNodes[scrollKey];\n    }\n  }, {\n    key: \"_savePositions\",\n    value: function _savePositions() {\n      var _window = window,\n          scrollX = _window.scrollX,\n          scrollY = _window.scrollY;\n\n      this._savePosition('window', {\n        scrollX: scrollX,\n        scrollY: scrollY\n      });\n\n      for (var scrollKey in this._scrollableNodes) {\n        var node = this._scrollableNodes[scrollKey];\n        var scrollLeft = node.scrollLeft,\n            scrollTop = node.scrollTop;\n\n        this._savePosition(scrollKey, {\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        });\n      }\n    }\n  }, {\n    key: \"_savePosition\",\n    value: function _savePosition(scrollKey, position) {\n      debug('save', this._locationKey, scrollKey, position);\n\n      if (!(scrollKey in this._deferredNodes)) {\n        var loc = this._positions[this._locationKey];\n\n        if (!loc) {\n          loc = this._positions[this._locationKey] = {};\n        }\n\n        loc[scrollKey] = position;\n      } else {\n        debug(\"Skipping save due to deferred scroll of \".concat(scrollKey));\n      }\n    }\n  }, {\n    key: \"_loadPosition\",\n    value: function _loadPosition(scrollKey) {\n      var loc = this._positions[this._locationKey];\n      return loc ? loc[scrollKey] || null : null;\n    }\n  }, {\n    key: \"_restoreNode\",\n    value: function _restoreNode(scrollKey) {\n      var _this2 = this;\n\n      var position = this._loadPosition(scrollKey);\n\n      var _ref = position || {},\n          _ref$scrollLeft = _ref.scrollLeft,\n          scrollLeft = _ref$scrollLeft === void 0 ? 0 : _ref$scrollLeft,\n          _ref$scrollTop = _ref.scrollTop,\n          scrollTop = _ref$scrollTop === void 0 ? 0 : _ref$scrollTop;\n\n      debug('restore', this._locationKey, scrollKey, scrollLeft, scrollTop);\n\n      this._cancelDeferred(scrollKey);\n\n      var node = this._scrollableNodes[scrollKey];\n\n      var attemptScroll = function attemptScroll() {\n        node.scrollLeft = scrollLeft;\n        node.scrollTop = scrollTop;\n        return node.scrollLeft === scrollLeft && node.scrollTop === scrollTop;\n      };\n\n      if (!attemptScroll()) {\n        var failedScroll = function failedScroll() {\n          debug(\"Could not scroll \".concat(scrollKey, \" to (\").concat(scrollLeft, \", \").concat(scrollTop, \")\") + \"; scroll size is (\".concat(node.scrollWidth, \", \").concat(node.scrollHeight, \")\"));\n        };\n\n        var _this$props$timeout = this.props.timeout,\n            timeout = _this$props$timeout === void 0 ? defaultTimeout : _this$props$timeout;\n\n        if (timeout) {\n          debug(\"Deferring scroll of \".concat(scrollKey, \" for up to \").concat(timeout, \" ms\"));\n          (this._deferredNodes[scrollKey] = (0, _timedMutationObserver.default)(attemptScroll, timeout, node)).then(function () {\n            return delete _this2._deferredNodes[scrollKey];\n          }).catch(function (e) {\n            if (!e.cancelled) failedScroll();\n          });\n        } else {\n          failedScroll();\n        }\n      }\n    }\n  }, {\n    key: \"_restoreWindow\",\n    value: function _restoreWindow() {\n      var _this3 = this;\n\n      var scrollKey = 'window';\n\n      var position = this._loadPosition(scrollKey);\n\n      var _ref2 = position || {},\n          _ref2$scrollX = _ref2.scrollX,\n          scrollX = _ref2$scrollX === void 0 ? 0 : _ref2$scrollX,\n          _ref2$scrollY = _ref2.scrollY,\n          scrollY = _ref2$scrollY === void 0 ? 0 : _ref2$scrollY;\n\n      debug('restore', this._locationKey, scrollKey, scrollX, scrollY);\n\n      this._cancelDeferred(scrollKey);\n\n      var attemptScroll = function attemptScroll() {\n        window.scrollTo(scrollX, scrollY);\n        return window.scrollX === scrollX && window.scrollY === scrollY;\n      };\n\n      if (!attemptScroll()) {\n        var failedScroll = function failedScroll() {\n          debug(\"Could not scroll \".concat(scrollKey, \" to (\").concat(scrollX, \", \").concat(scrollY, \")\") + \"; scroll size is (\".concat(document.body.scrollWidth, \", \").concat(document.body.scrollHeight, \")\"));\n        };\n\n        var _this$props$timeout2 = this.props.timeout,\n            timeout = _this$props$timeout2 === void 0 ? defaultTimeout : _this$props$timeout2;\n\n        if (timeout) {\n          debug(\"Deferring scroll of \".concat(scrollKey, \" for up to \").concat(timeout, \" ms\"));\n          (this._deferredNodes[scrollKey] = (0, _timedMutationObserver.default)(attemptScroll, timeout)).then(function () {\n            return delete _this3._deferredNodes[scrollKey];\n          }).catch(function (e) {\n            if (!e.cancelled) failedScroll();\n          });\n        } else {\n          failedScroll();\n        }\n      }\n    }\n  }, {\n    key: \"_cancelDeferred\",\n    value: function _cancelDeferred(scrollKey) {\n      var deferred = this._deferredNodes[scrollKey];\n\n      if (deferred) {\n        debug(\"Cancelling deferred scroll of \".concat(scrollKey));\n        delete this._deferredNodes[scrollKey];\n        deferred.cancel();\n      }\n    }\n  }]);\n\n  return ScrollManager;\n}(_react.default.Component);\n\nexports.ScrollManager = ScrollManager;\nScrollManager.propTypes = {\n  history: _propTypes.default.object.isRequired,\n  sessionKey: _propTypes.default.string,\n  timeout: _propTypes.default.number,\n  children: _propTypes.default.node\n};\n\nfunction withManager(Component) {\n  return function ManagedComponent(props) {\n    return _react.default.createElement(ManagerContext.Consumer, null, function (manager) {\n      return _react.default.createElement(Component, _extends({}, props, {\n        manager: manager\n      }));\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"script"}