{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = timedMutationObserver;\nvar observeMutations, disconnectObserver; // fall back to polling if MutationObserver is not available\n\nif (window.MutationObserver) {\n  observeMutations = function observeMutations(callback, _timeout, node, config) {\n    var observer = new MutationObserver(callback);\n    observer.observe(node, config);\n    return observer;\n  };\n\n  disconnectObserver = function disconnectObserver(observer) {\n    observer.disconnect();\n  };\n} else {\n  observeMutations = function observeMutations(callback, timeout) {\n    return setInterval(callback, Math.min(timeout, 500));\n  };\n\n  disconnectObserver = function disconnectObserver(observer) {\n    clearInterval(observer);\n  };\n}\n\nvar defaultObserverConfig = {\n  attributes: true,\n  childList: true,\n  subtree: true\n};\n\nfunction timedMutationObserver(callback, timeout) {\n  var node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n  var observerConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultObserverConfig;\n  var cancel;\n  var result = new Promise(function (resolve, reject) {\n    var observer;\n    var timeoutId;\n    var success;\n\n    cancel = function cancel() {\n      disconnectObserver(observer);\n      clearTimeout(timeoutId);\n\n      if (!success) {\n        var reason = new Error('MutationObserver cancelled');\n        reason.cancelled = true;\n        reason.timedOut = false;\n        reject(reason);\n      }\n    };\n\n    observer = observeMutations(function () {\n      if (!success && (success = callback())) {\n        cancel();\n        resolve(success);\n      }\n    }, timeout, node, observerConfig);\n    timeoutId = setTimeout(function () {\n      disconnectObserver(observer);\n      clearTimeout(timeoutId);\n\n      if (!success) {\n        var reason = new Error('MutationObserver timed out');\n        reason.cancelled = false;\n        reason.timedOut = true;\n        reject(reason);\n      }\n    }, timeout);\n  });\n  result.cancel = cancel;\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}